func_call_prompt = '''
‘’’
{}
‘’’
'''




module_gen_prompt = '''
Write the code based on the given natural language specification, predefined tasks and module information.

Problem Description:
‘’’
{}
‘’’

Code snippet
‘’’
{}
‘’’

predefined tasks and module information:
{}

Requirement
    - Generate only class.
    - The generated code from prompt should have no type hints.
'''


module_prompt = '''
Clearly define the sub-tasks and modules required to implement the given problems in code, and explain their connection relationships. 
And for accurate implementation, propose optimal algorithms, data structures, and core keywords to achieve the objectives of each task, module.

Problem Description:
{}       
{}

Requirement
    - Write without code
    - Exclude consideration of readability.
'''


depensive_info_prompt = '''
Generate potential error scenarios that need to be handled by the function.

Problem
‘’’
{}
{}
‘’’

generated code
‘’’
{}
‘’’
'''

depensive_prompt = '''
Refer to the code and natural language specification below, and write information about potential errors that may need to be addressed during code refactoring.

Code to be fixed
‘’’
{}
‘’’

Problem
‘’’
{}
{}
‘’’

Requirement
    - Describe only information about potential errors.
'''

depensive_submit_prompt = '''
Refactor the code based on the information below.

Code
‘’’
{}
‘’’

Additional information
‘’’
{}
‘’’

Requirement
    - Generate only class.
    - The generated code from prompt should have no type hints.
'''

init_prompt = '''
When LLM generates and executes code based on the problem information below, generate information about technical elements or algorithms to consider.

Problem
‘’’
{}
‘’’

Code template
‘’’
{}
‘’’

Problem Tag
‘’’
{}
‘’’

Requirements:
    - Write only scenarios and how to solve them.
    - Write it as briefly as possible
    - Write it in consideration of the Problem tag.
    - All scenarios are described based on what is presented in the problem information.
    - Write only 5 scenarios for technical or algorithms elements that should be considered most important when generating code using LLM.
'''

gen_tag_prompt = '''
Suggest specific keywords for essential algorithms, data formats, and data structures to consider in order for the code generated by the specification below to operate for a purpose.

Problem Description
‘’’
{}
‘’’

code snippet
‘’’
{}
‘’’

Rquirements
	- write only domain and task name
	- Give a maximum of 5
	- A domain or task includes logical, implementational, and structural elements of the specification.
	- Write the list in Python list format.
'''

tag_prompt = '''
Write a Python code that satisfies the specifications below.

Problem Description
‘’’
{}
‘’’

code snippet
‘’’
{}
‘’’

Domain, Task
‘’’
{}
‘’’

Requirement
    - Generate only class or function.
    - The generated code from prompt should have no type hints.
'''

wrong_prompt = '''
The code below did not pass the test case presented. Give information on which part of the code is wrong and how to resolve it. 
(Testcase: Test case: Answer: Output of code, Excellent Answer: Answer of the given test case)

Wrong Code
‘’’
{}
‘’’

Test case evaluation results
‘’’
{}
‘’’

Requirements:
    - Write only information about what part of the code is a problem and how to solve it.
'''

wrong_gen_prompt = '''
The code below did not pass the test case presented. Correct the code based on the additional information provided.

Wrong Code
‘’’
{}
‘’’

Test case evaluation results
‘’’
{}
‘’’

Additional information for code modification
‘’’
{}
‘’’

Requirement
    - Generate only class or function.
    - The generated code from prompt should have no type hints.
'''

w_norm_prompt = '''
The following code failed. Correct the code.

Wrong Code
‘’’
{}
‘’

Requirement
    - Generate only class or function.
    - The generated code from prompt should have no type hints.
'''

new_prompt = '''
Write a Python code that satisfies the conditions below.

Problem
‘’’
{}
‘’’

Code template
‘’’
{}
‘’’

Things to consider when generating code
‘’’
{}
‘’’

Requirement
    - Generate only class or function.
    - Variables must be used after declaration.
    - The generated code from prompt should have no type hints.
'''

norm_prompt = '''
Write a Python code that satisfies the conditions below.

Problem
‘’’
{}
‘’’

Code template
‘’’
{}
‘’’

Requirement
    - Generate only class.
    - The generated code from prompt should have no type hints.
'''

test_init_prompt = '''
When LLM generates and executes code based on the problem information below, generate information about technical elements or algorithms to consider.

Problem
‘’’
{}
‘’’

Code template
‘’’
{}
‘’’

Problem Tag
‘’’
{}
‘’’

Requirements:
    - Write only scenarios and how to solve them.
    - Write it as briefly as possible
    - Write it in consideration of the Problem tag.
    - All scenarios are described based on what is presented in the problem information.
    - Write only 5 scenarios for technical or algorithms elements that should be considered most important when generating code using LLM.
'''



example_query_context_prompt = '''
{}

Descrpition
‘’’
{}
‘’’

Requirement
    - Generate only class.
    - The generated code from prompt should have no type hints.
'''


example_prompt = '''
Write a python program that satisfies the description below.

Descrpition
‘’’
{}
‘’’

Requirement
    - Generate only class.
    - The generated code from prompt should have no type hints.
'''